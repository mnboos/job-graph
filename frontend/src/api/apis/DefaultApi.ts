/* tslint:disable */
/* eslint-disable */
/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  IsochroneOut,
  JobOpeningOut,
  PlacesSearchResult,
} from '../models/index';
import {
    IsochroneOutFromJSON,
    IsochroneOutToJSON,
    JobOpeningOutFromJSON,
    JobOpeningOutToJSON,
    PlacesSearchResultFromJSON,
    PlacesSearchResultToJSON,
} from '../models/index';

export interface ApiGenerateIsochroneRequest {
    travelTimeMinutes: number;
    lat: number;
    lon: number;
    profile: string;
}

export interface ApiJobsRequest {
    travelTimeMinutes: number;
    lat: number;
    lon: number;
    profile: string;
}

export interface ApiSearchRequest {
    query: string;
    zoom: number;
    lat: number;
    lon: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Generate Isochrone
     */
    async apiGenerateIsochroneRaw(requestParameters: ApiGenerateIsochroneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IsochroneOut>> {
        if (requestParameters['travelTimeMinutes'] == null) {
            throw new runtime.RequiredError(
                'travelTimeMinutes',
                'Required parameter "travelTimeMinutes" was null or undefined when calling apiGenerateIsochrone().'
            );
        }

        if (requestParameters['lat'] == null) {
            throw new runtime.RequiredError(
                'lat',
                'Required parameter "lat" was null or undefined when calling apiGenerateIsochrone().'
            );
        }

        if (requestParameters['lon'] == null) {
            throw new runtime.RequiredError(
                'lon',
                'Required parameter "lon" was null or undefined when calling apiGenerateIsochrone().'
            );
        }

        if (requestParameters['profile'] == null) {
            throw new runtime.RequiredError(
                'profile',
                'Required parameter "profile" was null or undefined when calling apiGenerateIsochrone().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['travelTimeMinutes'] != null) {
            queryParameters['travel_time_minutes'] = requestParameters['travelTimeMinutes'];
        }

        if (requestParameters['lat'] != null) {
            queryParameters['lat'] = requestParameters['lat'];
        }

        if (requestParameters['lon'] != null) {
            queryParameters['lon'] = requestParameters['lon'];
        }

        if (requestParameters['profile'] != null) {
            queryParameters['profile'] = requestParameters['profile'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/generate_isochrone`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IsochroneOutFromJSON(jsonValue));
    }

    /**
     * Generate Isochrone
     */
    async apiGenerateIsochrone(requestParameters: ApiGenerateIsochroneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IsochroneOut> {
        const response = await this.apiGenerateIsochroneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Jobs
     */
    async apiJobsRaw(requestParameters: ApiJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<JobOpeningOut>>> {
        if (requestParameters['travelTimeMinutes'] == null) {
            throw new runtime.RequiredError(
                'travelTimeMinutes',
                'Required parameter "travelTimeMinutes" was null or undefined when calling apiJobs().'
            );
        }

        if (requestParameters['lat'] == null) {
            throw new runtime.RequiredError(
                'lat',
                'Required parameter "lat" was null or undefined when calling apiJobs().'
            );
        }

        if (requestParameters['lon'] == null) {
            throw new runtime.RequiredError(
                'lon',
                'Required parameter "lon" was null or undefined when calling apiJobs().'
            );
        }

        if (requestParameters['profile'] == null) {
            throw new runtime.RequiredError(
                'profile',
                'Required parameter "profile" was null or undefined when calling apiJobs().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['travelTimeMinutes'] != null) {
            queryParameters['travel_time_minutes'] = requestParameters['travelTimeMinutes'];
        }

        if (requestParameters['lat'] != null) {
            queryParameters['lat'] = requestParameters['lat'];
        }

        if (requestParameters['lon'] != null) {
            queryParameters['lon'] = requestParameters['lon'];
        }

        if (requestParameters['profile'] != null) {
            queryParameters['profile'] = requestParameters['profile'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/jobs`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(JobOpeningOutFromJSON));
    }

    /**
     * Jobs
     */
    async apiJobs(requestParameters: ApiJobsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<JobOpeningOut>> {
        const response = await this.apiJobsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search
     */
    async apiSearchRaw(requestParameters: ApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PlacesSearchResult>>> {
        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling apiSearch().'
            );
        }

        if (requestParameters['zoom'] == null) {
            throw new runtime.RequiredError(
                'zoom',
                'Required parameter "zoom" was null or undefined when calling apiSearch().'
            );
        }

        if (requestParameters['lat'] == null) {
            throw new runtime.RequiredError(
                'lat',
                'Required parameter "lat" was null or undefined when calling apiSearch().'
            );
        }

        if (requestParameters['lon'] == null) {
            throw new runtime.RequiredError(
                'lon',
                'Required parameter "lon" was null or undefined when calling apiSearch().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['zoom'] != null) {
            queryParameters['zoom'] = requestParameters['zoom'];
        }

        if (requestParameters['lat'] != null) {
            queryParameters['lat'] = requestParameters['lat'];
        }

        if (requestParameters['lon'] != null) {
            queryParameters['lon'] = requestParameters['lon'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlacesSearchResultFromJSON));
    }

    /**
     * Search
     */
    async apiSearch(requestParameters: ApiSearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PlacesSearchResult>> {
        const response = await this.apiSearchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
