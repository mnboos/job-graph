/* tslint:disable */
/* eslint-disable */
/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Defines the descriptive properties of a feature.
 * 
 * We only include fields the frontend needs, plus our custom `show_canton` flag.
 * @export
 * @interface PropertiesSchema
 */
export interface PropertiesSchema {
    /**
     * 
     * @type {string}
     * @memberof PropertiesSchema
     */
    city?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PropertiesSchema
     */
    countrycode?: string;
    /**
     * 
     * @type {string}
     * @memberof PropertiesSchema
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof PropertiesSchema
     */
    showCanton: boolean;
    /**
     * 
     * @type {string}
     * @memberof PropertiesSchema
     */
    state?: string;
}

/**
 * Check if a given object implements the PropertiesSchema interface.
 */
export function instanceOfPropertiesSchema(value: object): value is PropertiesSchema {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('showCanton' in value) || value['showCanton'] === undefined) return false;
    return true;
}

export function PropertiesSchemaFromJSON(json: any): PropertiesSchema {
    return PropertiesSchemaFromJSONTyped(json, false);
}

export function PropertiesSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PropertiesSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'city': json['city'] == null ? undefined : json['city'],
        'countrycode': json['countrycode'] == null ? undefined : json['countrycode'],
        'name': json['name'],
        'showCanton': json['show_canton'],
        'state': json['state'] == null ? undefined : json['state'],
    };
}

export function PropertiesSchemaToJSON(json: any): PropertiesSchema {
    return PropertiesSchemaToJSONTyped(json, false);
}

export function PropertiesSchemaToJSONTyped(value?: PropertiesSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'city': value['city'],
        'countrycode': value['countrycode'],
        'name': value['name'],
        'show_canton': value['showCanton'],
        'state': value['state'],
    };
}

