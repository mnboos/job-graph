/* tslint:disable */
/* eslint-disable */
/**
 * NinjaAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { GeometrySchema } from './GeometrySchema';
import {
    GeometrySchemaFromJSON,
    GeometrySchemaFromJSONTyped,
    GeometrySchemaToJSON,
    GeometrySchemaToJSONTyped,
} from './GeometrySchema';
import type { PropertiesSchema } from './PropertiesSchema';
import {
    PropertiesSchemaFromJSON,
    PropertiesSchemaFromJSONTyped,
    PropertiesSchemaToJSON,
    PropertiesSchemaToJSONTyped,
} from './PropertiesSchema';

/**
 * Represents a single, augmented search result feature.
 * @export
 * @interface FeatureSchema
 */
export interface FeatureSchema {
    /**
     * 
     * @type {GeometrySchema}
     * @memberof FeatureSchema
     */
    geometry: GeometrySchema;
    /**
     * 
     * @type {PropertiesSchema}
     * @memberof FeatureSchema
     */
    properties: PropertiesSchema;
    /**
     * 
     * @type {string}
     * @memberof FeatureSchema
     */
    type?: string;
}

/**
 * Check if a given object implements the FeatureSchema interface.
 */
export function instanceOfFeatureSchema(value: object): value is FeatureSchema {
    if (!('geometry' in value) || value['geometry'] === undefined) return false;
    if (!('properties' in value) || value['properties'] === undefined) return false;
    return true;
}

export function FeatureSchemaFromJSON(json: any): FeatureSchema {
    return FeatureSchemaFromJSONTyped(json, false);
}

export function FeatureSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureSchema {
    if (json == null) {
        return json;
    }
    return {
        
        'geometry': GeometrySchemaFromJSON(json['geometry']),
        'properties': PropertiesSchemaFromJSON(json['properties']),
        'type': json['type'] == null ? undefined : json['type'],
    };
}

export function FeatureSchemaToJSON(json: any): FeatureSchema {
    return FeatureSchemaToJSONTyped(json, false);
}

export function FeatureSchemaToJSONTyped(value?: FeatureSchema | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'geometry': GeometrySchemaToJSON(value['geometry']),
        'properties': PropertiesSchemaToJSON(value['properties']),
        'type': value['type'],
    };
}

